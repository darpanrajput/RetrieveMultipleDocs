package com.darpan.retrievemultipledocs;


import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.List;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "MainActivity";

    private static final String KEY_TITLE = "title";
    private static final String KEY_DESCRIPTION = "description";

    private EditText editTextTitle;
    private EditText editTextDescription;
    private TextView textViewData;
    private EditText editTextPriority;

    private FirebaseFirestore db = FirebaseFirestore.getInstance();
    private CollectionReference notebookRef = db.collection("Notebook");//reference of collection
    private DocumentReference noteRef = db.document("Notebook/My First Note");//reference of documents


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        editTextTitle = findViewById(R.id.edit_text_title);
        editTextDescription = findViewById(R.id.edit_text_description);
        textViewData = findViewById(R.id.text_view_data);
        editTextPriority = findViewById(R.id.edit_text_priority);
    }

    @Override
    protected void onStart() {
        super.onStart();
        notebookRef.addSnapshotListener(this, new EventListener<QuerySnapshot>() {
            @Override
            public void onEvent(QuerySnapshot queryDocumentSnapshots, FirebaseFirestoreException e) {
                if (e != null) {
                    return;
                }

                String data = "";

                for (QueryDocumentSnapshot documentSnapshot : queryDocumentSnapshots) {
                    Note note = documentSnapshot.toObject(Note.class);
                    note.setDocumentId(documentSnapshot.getId());

                    String documentId = note.getDocumentId();
                    String title = note.getTitle();
                    String description = note.getDescription();

                    int priority = note.getPriority();

                    data += "ID: " + documentId
                            + "\nTitle: " + title + "\nDescription: " + description
                            + "\nPriority: " + priority + "\n\n";
                }

                textViewData.setText(data);
            }
        });
    }

    public void addNote(View v) {
        String title = editTextTitle.getText().toString();
        String description = editTextDescription.getText().toString();
        if (editTextPriority.length() == 0) {
            editTextPriority.setText("0");
        }

        int priority = Integer.parseInt(editTextPriority.getText().toString());


        Note note = new Note(title, description, priority);

//here we ar adding the whole note object in collection which is same as adding the documents in collection
        notebookRef.add(note);
        //here we don't define the name of the documents like in previous app it was my note document but the firebase autogenerated the id
    }


    /*SINGLE QUERIES */

  /*  public void loadNotes(View v) {
        notebookRef.whereGreaterThan("priority", 2)// to filter result in according to priority
                .orderBy("priority", Query.Direction.DESCENDING)
                // order the result in filtered range in descending order but greater than and equal to 2
               *//*if we try to order it by title nad filter it with priority then our app would crash as this is single query
     *  but this also can be done with the help of compound queries*//*
               // .limit(4)// fetch first 4 result in DESCENDING order 6,5,4,3 if the priority is 1,2,3,4,5,6
                .orderBy("title")//now do order by title but before we need to create the indexes i firebase
                .get()

                .addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {
                    //this query snapshot will contain multiple docs
                    @Override
                    public void onSuccess(QuerySnapshot queryDocumentSnapshots) {
                        String data = "";

                        for (QueryDocumentSnapshot documentSnapshot : queryDocumentSnapshots) {
                            Note note = documentSnapshot.toObject(Note.class);
                            note.setDocumentId(documentSnapshot.getId());

                            String documentId = note.getDocumentId();//this id can be usend to get the single document in collection by using notebookRef.Dcoument(documentID)
                            String title = note.getTitle();
                            String description = note.getDescription();

                            int priority = note.getPriority();

                            data += "ID: " + documentId
                                    + "\nTitle: " + title + "\nDescription: " + description
                                    + "\nPriority: " + priority + "\n\n";
                        }

                        textViewData.setText(data);
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                *//*to check what went wrong this will a link to set indexs because firebase does not
     * look to every doc to order by descending and then order by title both the queries are different
     * and come under the compound query section*//*
                Log.d(TAG, e.toString());
            }
        });

    }*/

    /*MERGE TASK TO CREATE OR QUERIES*/
    public void loadNotes(View v) {
        /*Here we will crate the compound queries with th help of tasks*/

        Task t1 = notebookRef.whereLessThan("priority", 2)// to filter result in according to priority
                .orderBy("priority")//ascending order
                .get();

        Task t2 = notebookRef.whereGreaterThan("priority", 2)// to filter result in according to priority
                .orderBy("priority")
                .get();
        /*now the problem is which task would finish first so we need to create a combined task*/
        Task<List<QuerySnapshot>> alltask = Tasks.whenAllSuccess(t1, t2);
        //this list of object will contains two snapshots one is greater than 2 and other is less than 2

        alltask.addOnSuccessListener(new OnSuccessListener<List<QuerySnapshot>>() {
            @Override
            public void onSuccess(List<QuerySnapshot> querySnapshots) {
                /*here we will receive the list of snapshot which consist of two above queries*/
                String data = "";
                for (QuerySnapshot queryDocumentSnapshots : querySnapshots) {
                    for (QueryDocumentSnapshot documentSnapshot : queryDocumentSnapshots) {
                        //here is the single query snapshot from the list of queries so we have to apply two loops
                        Note note = documentSnapshot.toObject(Note.class);
                        note.setDocumentId(documentSnapshot.getId());

                        String documentId = note.getDocumentId();
                        String title = note.getTitle();
                        String description = note.getDescription();
                        int priority = note.getPriority();

                        data += "ID: " + documentId
                                + "\nTitle: " + title + "\nDescription: " + description
                                + "\nPriority: " + priority + "\n\n";
                    }
                }

                textViewData.setText(data);//docs where the peiority is greater than or equal to 2

            }
        });


    }
}
